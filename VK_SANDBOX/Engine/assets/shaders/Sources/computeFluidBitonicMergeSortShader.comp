#version 450

struct FluidParticle
{
	vec4 position;
    vec4 predictPosition;
	vec4 velocity;
    vec4 color;
    float pressure;
    float density;
};
struct SpacialEntry
{
	 uint index;
	 uint hash; 
	 uint key;   
     uint dummy;
};
struct StartIndexForSpacialEntry
{
     uint index; 
};
layout (std140, binding = 0) uniform ParameterUBO
{
    vec4 maxBound;
    vec4 minBound;
    vec4 interactionSpherePos;

    float deltaTime; 
    float accumulatedTime;
    uint particleCount;
    float gasConstant; 

    float restDensity;
    float viscosity;
    float radius;
	float interactionSphereRadius;

    int dim;
	int block;
	int dummy1;
	int dummy2;
} ubo;
layout(std430, binding = 1) readonly buffer ParticleSSBOIn 
{
   FluidParticle particlesIn[ ];
};
//layout(std430, binding = 2) buffer ParticleSSBOOut 
//{
//   FluidParticle particlesOut[ ];
//};
layout(std430, binding = 3) buffer SpacialEntryIn 
{
   SpacialEntry spacialEntryIn[ ];
};
layout(std430, binding = 4) buffer SpacialEntryOut 
{
   SpacialEntry spacialEntryOut[ ];
};
layout(std430, binding = 5) buffer StartIndexForSpacialEntryIn 
{
   StartIndexForSpacialEntry startIndexIn[ ];
};
//layout(std430, binding = 6) buffer StartIndexForSpacialEntryOut 
//{
//   StartIndexForSpacialEntry startIndexOut[ ];
//};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
// Particle Count: 65536
// Thread Count per work group : 256
// Work Group Count: 65536/256
// Group1 0~255, Group2 256~511...


void main() 
{
    uint index = gl_GlobalInvocationID.x;  // 0 ~ 65536
    if (index >= ubo.particleCount) { return; } // No work for this thread

    // Bitonic Merge sort

    int block = ubo.block;
    int dim = ubo.dim;

    uint compareIndex = index ^ block;
    if (compareIndex < index || compareIndex >= ubo.particleCount) return;

    // Direction of the block (ascending or descending)
    bool direction = ((index / block) % 2) == 0;

    SpacialEntry entry1 = spacialEntryIn[index];
    SpacialEntry entry2 = spacialEntryIn[compareIndex];

    // Same sort direction?
    if ((direction && (entry1.key > entry2.key)) || (!direction && (entry1.key < entry2.key))) 
    {
        // Swap
        spacialEntryIn[index] = entry2;
        spacialEntryIn[compareIndex] = entry1;

        //Test
        spacialEntryOut[index] = entry2;
        spacialEntryOut[compareIndex] = entry1;
    }

}
