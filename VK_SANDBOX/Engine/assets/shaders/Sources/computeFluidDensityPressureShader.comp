#version 450

struct FluidParticle
{
	vec4 position;
    vec4 predictPosition;
	vec4 velocity;
    vec4 color;
    float pressure;
    float density;
};
struct SpacialEntry
{
	 uint index;
	 uint hash; 
	 uint key;   
     uint dummy;
};
struct StartIndexForSpacialEntry
{
     uint index; 
};
layout (std140, binding = 0) uniform ParameterUBO
{
    vec4 maxBound;
    vec4 minBound;
    vec4 interactionSpherePos;

    float deltaTime; 
    float accumulatedTime;
    uint particleCount;
    float gasConstant; 

    float restDensity;
    float viscosity;
    float radius;
	float interactionSphereRadius;

    int dim;
	int block;
	int dummy1;
	int dummy2;
} ubo;
layout(std430, binding = 1) readonly buffer ParticleSSBOIn 
{
   FluidParticle particlesIn[ ];
};
layout(std430, binding = 2) buffer ParticleSSBOOut 
{
   FluidParticle particlesOut[ ];
};
layout(std430, binding = 3) readonly buffer SpacialEntryIn 
{
   SpacialEntry spacialEntryIn[ ];
};
layout(std430, binding = 4) buffer SpacialEntryOut 
{
   SpacialEntry spacialEntryOut[ ];
};
layout(std430, binding = 5) readonly buffer StartIndexForSpacialEntryIn 
{
   StartIndexForSpacialEntry startIndexIn[ ];
};
layout(std430, binding = 6) buffer StartIndexForSpacialEntryOut 
{
   StartIndexForSpacialEntry startIndexOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
// Particle Count: 65536
// Thread Count per work group : 256
// Work Group Count: 65536/256
// Group1 0~255, Group2 256~511...

float fixedDeltaTime = 1.0f / 120.f;
float pi = 3.1415926;
float mass = 1.0; 
float boundDamping = -0.95f;


float SpikyKernelPow2 (float r, float h) // Base on Sebastian Lague
{
    if( 0 <= r && r <= h )
    {
       float x = h - r;
       float coeff = 15.0 / (2.0 * pi * pow(h, 5.0));
       return coeff * x * x;
    }
    return 0.0;
}

float DensityKernel (float r, float h) // Base on paper Wpoly6
{
    if( 0 <= r && r <= h )
    {
       float x = h * h - r * r;
       float coeff = 315.0 / (64.0 * pi * pow(h, 9.0));
       return coeff * x * x * x;
    }
    return 0.0;
}


void main() 
{
    uint index = gl_GlobalInvocationID.x;  // 0 ~ 65536
    if (index >= ubo.particleCount) { return; } // No work for this thread
    FluidParticle particleIn = particlesIn[index];

    // Density at this particle = Sum of partciles ( mass * Smoothing Kernerl W)
    // Equation (3) https://matthias-research.github.io/pages/publications/sca03.pdf

    float density = 0.0;
    vec3 currentParticlePos = particlesIn[index].predictPosition.xyz;
    for (uint i = 0; i < ubo.particleCount; ++i) 
    {
        //if (index == i) { continue;}
        FluidParticle neighborParticle = particlesIn[i];
        float dist = distance(currentParticlePos, neighborParticle.predictPosition.xyz);
        if (dist > ubo.radius) continue;
        //density += mass * DensityKernel(dist, ubo.radius);
        density += mass * SpikyKernelPow2(dist, ubo.radius);
    }
    density += 0.000001; // make sure not zero

    // Pressure at this particle = gasConstant * (density - restDensity)
    // Equation (12) https://matthias-research.github.io/pages/publications/sca03.pdf
    float pressure = (density - ubo.restDensity) * ubo.gasConstant;

    // write to SSBOOut
    particlesOut[index].position = particleIn.position;
    particlesOut[index].predictPosition = particleIn.predictPosition;
    particlesOut[index].velocity = particleIn.velocity;
    particlesOut[index].color = particleIn.color;
    particlesOut[index].pressure = pressure;
    particlesOut[index].density = density;
}
