#version 450

struct FluidParticle
{
	vec4 position;
    vec4 predictPosition;
	vec4 velocity;
    vec4 color;
    float pressure;
    float density;
};
layout (std140, binding = 0) uniform ParameterUBO
{
    float deltaTime; 
    float accumulatedTime;
    uint particleCount;
    float gasConstant; 
    float restDensity;
    float viscosity;
} ubo;


layout(std430, binding = 1) readonly buffer ParticleSSBOIn 
{
   FluidParticle particlesIn[ ];
};

layout(std430, binding = 2) buffer ParticleSSBOOut 
{
   FluidParticle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
// Particle Count: 65536
// Thread Count per work group : 256
// Work Group Count: 65536/256
// Group1 0~255, Group2 256~511...

float fixedDeltaTime = 1.0f / 120.f;
float pi = 3.1415926;
float radius = 2; //ubo
float mass = 1.0; 
vec3 maxBound = vec3(8.0, 15.0, 8.0);
vec3 minBound = vec3(-8.0, 0.0, -8.0);
float boundDamping = -0.95f;

float Wpoly6 (float r, float h)
{
    if( 0 < r && r <= h )
    {
       float x = h * h - r * r;
       float coeff = 315.0 / (64.0 * pi * pow(h, 9.0));
       return coeff * x * x * x;
    }
    return 0;
}

float SpikyKernelPow2 (float r, float h)
{
    if( 0 < r && r <= h )
    {
       float x = h - r;
       float coeff = 15.0 / (2.0 * pi * pow(h, 5.0));
       return coeff * x * x;
    }
    return 0;
}


void main() 
{
    uint index = gl_GlobalInvocationID.x;  // 0 ~ 65536
    if (index >= ubo.particleCount) { return; } // No work for this thread
    FluidParticle particleIn = particlesIn[index];

    // Density at this particle = Sum of partciles ( mass * Smoothing Kernerl W)
    // Equation (3) https://matthias-research.github.io/pages/publications/sca03.pdf

    float density = 0.0;
    vec3 currentParticlePos = particlesIn[index].predictPosition.xyz;
    for (uint i = 0; i < ubo.particleCount; ++i) 
    {
        //if (index == i) { continue;}
        FluidParticle neighborParticle = particlesIn[i];
        //float dist = distance(currentParticlePos, neighborParticle.predictPosition.xyz);
        float dist = distance(currentParticlePos, neighborParticle.position.xyz);
        if (dist > radius) continue;
        //density += mass * Wpoly6(dist, radius);
        density += mass * SpikyKernelPow2(dist, radius);
    }
    density += 0.000001; // make sure not zero

    // Pressure at this particle = gasConstant * (density - restDensity)
    // Equation (12) https://matthias-research.github.io/pages/publications/sca03.pdf
    float pressure = (density - ubo.restDensity) * ubo.gasConstant;

    // write to SSBOOut
    particlesOut[index].position = particleIn.position;
    particlesOut[index].predictPosition =particleIn.predictPosition;
    particlesOut[index].velocity = particleIn.velocity;
    particlesOut[index].color = particleIn.color;
    particlesOut[index].pressure = pressure;
    particlesOut[index].density = density;
}
