#version 450

struct FluidParticle
{
	vec4 position;
    vec4 predictPosition;
	vec4 velocity;
    vec4 color;
    float pressure;
    float density;
};
layout (std140, binding = 0) uniform ParameterUBO
{
    float deltaTime; 
    float accumulatedTime;
    uint particleCount;
    float gasConstant; 
    float restDensity;
    float viscosity;
} ubo;

// Ping-pong, switch 1&2
layout(std430, binding = 2) readonly buffer ParticleSSBOIn 
{
   FluidParticle particlesIn[ ];
};

layout(std430, binding = 1) buffer ParticleSSBOOut 
{
   FluidParticle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
// Particle Count: 65536
// Thread Count per work group : 256
// Work Group Count: 65536/256
// Group1 0~255, Group2 256~511...


float fixedDeltaTime = 1.0f / 120.f;
float pi = 3.1415926;
float radius = 2; //ubo
float mass = 1.0; 
vec3 maxBound = vec3(8.0, 15.0, 8.0);
vec3 minBound = vec3(-8.0, 0.0, -8.0);
float boundDamping = -0.95f;

// WSpiky(r,h) = 15/ pi h^6 (h - r)^3
// WSpiky'(r,h) = -45/ pi h^6 (h - r)^2
// WSpiky''(r,h) = 90/ pi h^6 (h - r)
float WSpikyFirstDerivative(float r, float h)
{
    if( 0 < r && r <= h )
    {
       float x = h - r;
       float coeff = -45.0 / ( pi * pow(abs(h), 6));
       return coeff * x * x;
    }
    return 0;
}
float WSpikySecondDerivative(float r, float h)
{
    if( 0 < r && r <= h )
    {
       float x = h - r;
       float coeff = 9.0 / ( pi * pow(abs(h), 6));
       return coeff * x;
    }
    return 0;
}

float DerivativeSpikyPow2(float r, float h)
{
    if( 0 < r && r <= h )
    {
       float x = h - r;
       float coeff = -15.0 / ( pi * pow(abs(h), 5));
       return coeff * x;
    }
    return 0;
}

void main() 
{
    uint index = gl_GlobalInvocationID.x;  // 0 ~ 65536
    if (index >= ubo.particleCount) { return; } // No work for this thread
    FluidParticle particleIn = particlesIn[index];

    // https://matthias-research.github.io/pages/publications/sca03.pdf
    // Equation (7)  Navier-Stokes equation
    // Movement caused by Fluid density change = Pressure + ExternalForces + Viscosity
    // Equation (10)  Pressure in SPH form
    // Equation (14)  Viscosity in SPH form

    vec3 currentParticlePos = particleIn.predictPosition.xyz;
    float pressure = particleIn.pressure;
    float density = particleIn.density;
    vec3 velocity = particleIn.velocity.xyz;

    vec3 pressureForce = vec3(0.0, 0.0, 0.0);
    vec3 viscosityForce = vec3(0.0, 0.0, 0.0);

    for (uint i = 0; i < ubo.particleCount; ++i) 
    {
        if (index == i) { continue;} // skip self

        FluidParticle neighborParticle = particlesIn[i];
        vec3 neighborPos = neighborParticle.predictPosition.xyz;
        vec3 vec = neighborPos - currentParticlePos;
        float dist = distance(currentParticlePos, neighborPos);
        if (dist > radius) continue;

        // Pressure
        float neighborPressure = neighborParticle.pressure;
        float neighborDensity = neighborParticle.density;
        float sharedPressure = (pressure + neighborPressure) / 2.0;
        vec3 direction = dist > 0 ? normalize(vec) : vec3(0.0, 1.0, 0.0);
        float influence = WSpikyFirstDerivative(dist, radius);
        //float influence = DerivativeSpikyPow2(dist, radius);
        pressureForce += mass * direction * sharedPressure * influence / neighborDensity;
       
        // Viscosity
        float influence2 = WSpikySecondDerivative(dist, radius);
	    vec3 neighbourVelocity = neighborParticle.velocity.xyz;
		viscosityForce += mass * (neighbourVelocity - velocity) * influence2;
    }

    vec3 newVelocity = velocity;
     
    vec3 gravity = vec3(0, -9.81, 0);
	newVelocity += gravity * ubo.deltaTime;

    vec3 pressureAccel = -pressureForce / (density * mass);
    newVelocity += pressureAccel * ubo.deltaTime;

    vec3 viscositAccel = viscosityForce * ubo.viscosity;
    newVelocity += viscositAccel * ubo.deltaTime;

    particlesOut[index].position = particleIn.position; 
    particlesOut[index].predictPosition = particleIn.predictPosition;
    particlesOut[index].velocity =  vec4(newVelocity, 0.0);
    particlesOut[index].color = particleIn.color; 
    particlesOut[index].pressure = particleIn.pressure;
    particlesOut[index].density = particleIn.density;

}
