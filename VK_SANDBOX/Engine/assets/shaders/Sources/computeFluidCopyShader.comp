#version 450

struct FluidParticle
{
	vec4 position;
    vec4 predictPosition;
	vec4 velocity;
    vec4 color;
    float pressure;
    float density;
};
struct SpacialEntry
{
	 uint index;
	 uint hash; 
	 uint key;   
     uint dummy;
};
struct StartIndexForSpacialEntry
{
     uint index; 
};
layout (std140, binding = 0) uniform ParameterUBO
{
    vec4 maxBound;
    vec4 minBound;
    vec4 interactionSpherePos;

    float deltaTime; 
    float accumulatedTime;
    uint particleCount;
    float gasConstant; 

    float restDensity;
    float viscosity;
    float radius;
	float interactionSphereRadius;

    int dim;
	int block;
	int dummy1;
	int dummy2;
} ubo;
// Ping-pong, switch 12, 34, 56
layout(std430, binding = 2) readonly buffer ParticleSSBOIn 
{
   FluidParticle particlesIn[ ];
};
layout(std430, binding = 1) buffer ParticleSSBOOut 
{
   FluidParticle particlesOut[ ];
};
layout(std430, binding = 4) readonly buffer SpacialEntryIn 
{
   SpacialEntry spacialEntryIn[ ];
};
layout(std430, binding = 3) buffer SpacialEntryOut 
{
   SpacialEntry spacialEntryOut[ ];
};
layout(std430, binding = 6) readonly buffer StartIndexForSpacialEntryIn 
{
   StartIndexForSpacialEntry startIndexIn[ ];
};
layout(std430, binding = 5) buffer StartIndexForSpacialEntryOut 
{
   StartIndexForSpacialEntry startIndexOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
// Particle Count: 65536
// Thread Count per work group : 256
// Work Group Count: 65536/256
// Group1 0~255, Group2 256~511...


void main() 
{
    // We are using cyclic buffer 
    // Make sure that end result is always written to Out Buffer
    // (binding = 2  buffer ParticleSSBOOut) 

    uint index = gl_GlobalInvocationID.x;  // 0 ~ 65536

    FluidParticle particleIn = particlesIn[index];
    particlesOut[index].position = particleIn.position;
    particlesOut[index].predictPosition = particleIn.predictPosition;
    particlesOut[index].velocity = particleIn.velocity;
    particlesOut[index].color = particleIn.color;
    particlesOut[index].pressure = particleIn.pressure;
    particlesOut[index].density = particleIn.density;

    SpacialEntry spacialEntryIn = spacialEntryIn[index];
    spacialEntryOut[index].index = spacialEntryIn.index;
    spacialEntryOut[index].hash = spacialEntryIn.hash;
    spacialEntryOut[index].key = spacialEntryIn.key;

    startIndexOut[index].index = startIndexIn[index].index;
}
