#version 450

struct FluidParticle
{
	vec4 position;
    vec4 predictPosition;
	vec4 velocity;
    vec4 color;
    float pressure;
    float density;
};
struct SpacialEntry
{
	 uint index;
	 uint hash; 
	 uint key;   
     uint dummy;
};
struct StartIndexForSpacialEntry
{
     uint index; 
};
layout (std140, binding = 0) uniform ParameterUBO
{
    vec4 maxBound;
    vec4 minBound;
    vec4 interactionSpherePos;

    float deltaTime; 
    float accumulatedTime;
    uint particleCount;
    float gasConstant; 

    float restDensity;
    float viscosity;
    float radius;
	float interactionSphereRadius;

    int dim;
	int block;
	int dummy1;
	int dummy2;
} ubo;
layout(std430, binding = 1) readonly buffer ParticleSSBOIn 
{
   FluidParticle particlesIn[ ];
};
//layout(std430, binding = 2) buffer ParticleSSBOOut 
//{
//   FluidParticle particlesOut[ ];
//};
layout(std430, binding = 3) buffer SpacialEntryIn 
{
   SpacialEntry spacialEntryIn[ ];
};
//layout(std430, binding = 4) buffer SpacialEntryOut 
//{
//   SpacialEntry spacialEntryOut[ ];
//};
layout(std430, binding = 5) buffer StartIndexForSpacialEntryIn 
{
   StartIndexForSpacialEntry startIndexIn[ ];
};
//layout(std430, binding = 6) buffer StartIndexForSpacialEntryOut 
//{
//   StartIndexForSpacialEntry startIndexOut[ ];
//};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
// Particle Count: 65536
// Thread Count per work group : 256
// Work Group Count: 65536/256
// Group1 0~255, Group2 256~511...


// Constants used for hashing
const uint hashKey1 = 15817; 
const uint hashKey2 = 9737359; 
const uint hashKey3 = 440817829; 
ivec3 GetCell(vec3 position, float cellSize)
{
    return ivec3(floor(position / cellSize));
}
uint HashCell(ivec3 cell) 
{
    return (cell.x * hashKey1) + (cell.y * hashKey2) + (cell.z * hashKey3);
}
uint KeyFromHash(uint hash, uint tableSize)
{
    return hash % tableSize;
}

void main() 
{
    // Update Spacial hash

    uint index = gl_GlobalInvocationID.x;  // 0 ~ 65536
    if (index >= ubo.particleCount) { return; } // No work for this thread

    // Reset Start index to be -
    startIndexIn[index].index = ubo.particleCount;

    // Update hash base on particle's position
	ivec3 cell = GetCell(particlesIn[index].predictPosition.xyz, ubo.radius);
	uint hash = HashCell(cell);
	uint key = KeyFromHash(hash, ubo.particleCount);

    spacialEntryIn[index].index = index;
    spacialEntryIn[index].hash = hash;
    spacialEntryIn[index].key = key;
}
