#version 450

struct FluidParticle
{
	vec4 position;
    vec4 predictPosition;
	vec4 velocity;
    vec4 color;
    float pressure;
    float density;
};
layout (std140, binding = 0) uniform ParameterUBO
{
    vec4 maxBound;
    vec4 minBound;
    vec4 interactionSpherePos;

    float deltaTime; 
    float accumulatedTime;
    uint particleCount;
    float gasConstant; 

    float restDensity;
    float viscosity;
    float radius;
	float interactionSphereRadius;
} ubo;


layout(std430, binding = 1) readonly buffer ParticleSSBOIn 
{
   FluidParticle particlesIn[ ];
};

layout(std430, binding = 2) buffer ParticleSSBOOut 
{
   FluidParticle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
// Particle Count: 65536
// Thread Count per work group : 256
// Work Group Count: 65536/256
// Group1 0~255, Group2 256~511...

float fixedDeltaTime = 1.0f / 120.f;
float pi = 3.1415926;
float mass = 1.0; 
float boundDamping = -0.95f;

vec4 getColorFromRamp(float value) 
{
    vec4 color1 = vec4(0.0, 0.0, 1.0, 1.0); // Blue
    vec4 color2 = vec4(0.0, 1.0, 0.0, 1.0); // Green
    vec4 color3 = vec4(1.0, 1.0, 0.0, 1.0); // Yellow
    vec4 color4 = vec4(1.0, 0.0, 0.0, 1.0); // Red

//    if (value < 0.33) 
//    {
//        return mix(color1, color2, value / 0.33);
//    } 
//    else if (value < 0.66) 
//    {
//        return mix(color2, color3, (value - 0.33) / 0.33);
//    } 
//    else 
//    {
//        return mix(color3, color4, (value - 0.66) / 0.34);
//    }
    if (value < 0.5) 
    {
        return mix(color1, color2, value / 0.5);
    } 
    else if (value < 0.8) 
    {
        return mix(color2, color3, (value - 0.5) / 0.3);
    } 
    else 
    {
        return mix(color3, color4, (value - 0.8) / 0.2);
    }
}

void main() 
{
    uint index = gl_GlobalInvocationID.x;  // 0 ~ 65536
    if (index >= ubo.particleCount) { return; } // No work for this thread
    FluidParticle particleIn = particlesIn[index];

    // Update position
    vec4 velocity = particleIn.velocity;
    vec4 position = particleIn.position + velocity * ubo.deltaTime;

     // Boundary
     vec4 minBound = ubo.minBound;
     vec4 maxBound = ubo.maxBound;
     float boundOffset = 0.1;

     if ((position.x - boundOffset) < minBound.x)
     {
       velocity.x *= boundDamping;
       position.x = minBound.x + boundOffset;
     }
     if ((position.x + boundOffset) > maxBound.x)
     {
       velocity.x *= boundDamping;
       position.x = maxBound.x - boundOffset;
     }
     if ((position.y - boundOffset) < minBound.y)
     {
       velocity.y *= boundDamping;
       position.y = minBound.y + boundOffset;
     }
     if ((position.y + boundOffset) > maxBound.y)
     {
       velocity.y *= boundDamping;
       position.y = maxBound.y - boundOffset;
     }
     if ((position.z - boundOffset) < minBound.z)
     {
       velocity.z *= boundDamping;
       position.z = minBound.z + boundOffset;
     }
     if ((position.z + boundOffset) > maxBound.z)
     {
       velocity.z *= boundDamping;
       position.z = maxBound.z - boundOffset;
     }
    
    // Color
    float maxVelocity = 10.0;
    float val = clamp(length(velocity)/maxVelocity, 0.0, 1.0);
    vec4 color = getColorFromRamp(val);

    // PredictPosition
    vec3 predictPosition = position.xyz + velocity.xyz * fixedDeltaTime;

    particlesOut[index].position = position;
    particlesOut[index].velocity = velocity;
    particlesOut[index].predictPosition = vec4(predictPosition, 1.0);
    particlesOut[index].color = color;
    particlesOut[index].pressure = particleIn.pressure;
    particlesOut[index].density = particleIn.density;
}
